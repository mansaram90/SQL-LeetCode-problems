*******************************Leet Code Medium Problem*******************************************

570: Managers with at least 5 reports 
Solution: 
select e1.name
from Employee e1
left join Employee e2 
on e1.id = e2.managerID
group by e1.name, e1.id
having count(e2.managerID) >=5;
------------------------------------------------------
1934: Confirmation rate 

Solution:
with cte1 as (select c.user_id, count(c.action) as no_act from Confirmations c
              where c.action = 'confirmed'
              group by c.user_id),
cte2 as (select user_id, count(user_id) as num_users from Confirmations
        group by user_id)
select s.user_id,  
case 
    when cte1.no_act is null then 0
    else cast((cast(cte1.no_act as float)/cast(cte2.num_users as float)) as decimal(10,2))end as confirmation_rate
from Signups s
left join cte1 on s.user_id = cte1.user_id
left join cte2 on s.user_id = cte2.user_id
----------------------------------------------------------
176: Second Highest Salary 

Solution:
select max(salary) as SecondHighestSalary 
from Employee 
where salary < (select max(salary) from Employee)
----------------------------------------------------------
185. Department Top Three Salaries 

Solution:
with ranked as (
               select  d.name  as Department, e.name as Employee, e.salary as Salary,
               dense_rank () over (partition by d.id order by e.salary desc) as rank1
               from Employee   e
               join Department d on e.departmentId = d.id 
                )
select Department, Employee, salary
from ranked
where rank1 <=3;
------------------------------------------------------------
585. Investments in 2016 

Solution:
select round(sum(tiv_2016), 2) as tiv_2016
from (
      select
      tiv_2016,
      count(*) over (partition by tiv_2015) as c_2015,
      count(*) over (partition by lat, lon) as c_loc
      from Insurance
      ) t
where t.c_2015 > 1
and t.c_loc = 1;
-------------------------------------------------------------

602. Friend Requests II: Who Has the Most Friends 
Solution:
with count_union as (
                     select requester_id as person_id, accepter_id as friend_id from RequestAccepted
                     union all
                     select accepter_id  as person_id, requester_id as friend_id from RequestAccepted
                     ),
friend_counts as (
                  select person_id as id, count(distinct friend_id) as num
                  from count_union
                  group by person_id
                  )
select top 1 id, num
from friend_counts
order by num desc, id; 
--------------------------------------------------------------

1321. Restaurant Growth 
Solution:
WITH daily AS (
               SELECT
               visited_on,
               SUM(amount) AS amount
               FROM Customer
               GROUP BY visited_on
                ),
calc as (
        select
        visited_on,
        sum(amount) over (order by visited_on rows between 6 proceding and current row) 
        as seven_sum,
        avg(convert(decimal(18,4), amount)) over (order by visited_on rows vetween 6 preceding and current row) as seven_avg,
        count(*) over (order by visited_on rows between 6 preceding and current row) as frame_rows
    from daily
        )
select
    visited_on,
    seven_sum as amount,
    cast(round(seven_avg, 2) as decimal(10,2)) AS average_amount
from calc
where frame_rows = 7
order by visited_on;
-------------------------------------------------------------------
1341. Movie Rating 

Solution:
with top_rater as (
  select top 1 u.name as results
  from MovieRating mr
  join Users u on u.user_id = mr.user_id
  group by u.user_id, u.name
  order by count(*) desc, u.name asc
),
feb_avg as (
  select m.title, avg(cast(mr.rating as decimal(9,4))) as avg_rating
  from MovieRating mr
  join Movies m on m.movie_id = mr.movie_id
  where mr.created_at >= '2020-02-01' and mr.created_at < '2020-03-01'
  group by m.title
),
top_movie as (
  select top 1 title as results
  from feb_avg
  order by avg_rating desc, title asc
)
select * from top_rater
union all
select * from top_movie;
----------------------------------------------------------------------
626. Exchange Seats 
Solution:
select 
case when id % 2 = 1 and id + 1 <= (select max(id) from Seat) then id + 1
     when id % 2 = 0 then id - 1
     else id
     end as id,
    student
from Seat
order by id;
----------------------------------------------------------------------
1907. Count Salary Categories 

Solution:
Select 'Low Salary' as category,
       sum(case when income < 20000 then 1 else 0 end) as accounts_count
from Accounts
union all
select 'Average Salary' as category,
       sum(case when income between 20000 and 50000 then 1 else 0 end) as accounts_count
from Accounts
union all
select 'High Salary' as category,
       sum(case whn income > 50000 then 1 else 0 end) as accounts_count
from Accounts;
------------------------------------------------------------------------
1204. Last Person to Fit in the Bus 
Solution:
with boarded as (select person_name, turn, 
                 sum(weight) over (order by turn rows unbounded preceding) as running_weight
                 from Queue)
select top 1 person_name
from boarded
where running_weight <= 1000
order by turn desc;
-------------------------------------------------------------------------

180. Consecutive Numbers 
Solution: 
with x as (select id, num,
           case 
           when num = lag(num)  over (order by id)
           and num = lead(num) OVER (order by id)
          then 1 else 0 end as in_run from Logs)
select distinct num as ConsecutiveNums
from x
where in_run = 1;
--------------------------------------------------------------------------
1045. Customers Who Bought All Products 
Solution:
select customer_id
from Customer
group by customer_id
having count(distinct product_key) = (select count(*) from Product);
----------------------------------------------------------------------------
1070. Product Sales Analysis III 

Solution: 
with firstyear as (select product_id, min(year) as first_year
                   from Sales
                   group by product_id)
select f.product_id, f.first_year, quantity, price from Sales s
join firstyear f on s.year = f.first_year
and s.product_id = f.product_id ;
-------------------------------------------------------------------------------
550. Game Play Analysis IV 
Solution:
with first_login as (
    select player_id, min(event_date) as first_date
    from Activity
    group by player_id
),
next_day_login as (
    select f.player_id
    from first_login f
    join Activity a
      on a.player_id = f.player_id
     and a.event_date = dateadd(day, 1, f.first_date)
)
select 
    cast(round(1.0 * count(distinct n.player_id) / count(distinct f.player_id), 2) as decimal(4,2)) as fraction
from first_login f
left join next_day_login n
  on f.player_id = n.player_id;
-------------------------------------------------------------------------------
1174. Immediate Food Delivery II 
Solution:
with Firstorders as (
    select 
        customer_id,
        order_date,
        customer_pref_delivery_date,
        row_number() over (partition by customer_id order by order_date asc) as rank
    from Delivery)

select 
    round(
        (cast(sum(case when order_date = customer_pref_delivery_date then 1 else 0 end) as decimal(10,2)) 
        / count(*)) * 100, 2) as immediate_percentage
from FirstOrders
where rank = 1;
--------------------------------------------------------------------------

1193. Monthly Transactions I
Solution:
Select 
format(trans_date, 'yyyy-MM') as month,
country,
count(*) as trans_count,
sum(case when state = 'approved' then 1 else 0 end) as approved_count,
sum(amount) as trans_total_amount,
sum(case when state = 'approved' then amount else 0 end) as approved_total_amount
from Transactions
group by format(trans_date, 'yyyy-MM'), country;

